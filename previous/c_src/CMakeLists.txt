CMAKE_MINIMUM_REQUIRED(VERSION 2.6 FATAL_ERROR)
PROJECT (compearth)
ENABLE_LANGUAGE(C)
IF (COMPEARTH_MAKE_FINTER)
   ENABLE_LANGUAGE(Fortran)
ENDIF()
ENABLE_TESTING()

SET(COMPEARTH_VERSION_MAJOR 1)
SET(COMPEARTH_VERSION_MINOR 1)
SET(COMPEARTH_VERSION_PATCH 1)
SET(COMPEARTH_VERSION ${COMPEARTH_VERSION_MAJOR}.${COMPEARTH_VERSION_MINOR}.${COMPEARTH_VERSION_PATCH})
MESSAGE("Configuring compearth version: " ${COMPEARTH_VERSION})

# Add modules for finding requisites
SET(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/CMakeModules)
# For testing
SET(CMAKE_TESTING_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/testing)
# For binaries
SET(CMAKE_BINARY_DIR  ${CMAKE_CURRENT_SOURCE_DIR}/bin)
# For libraries
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/lib)
SET(LIBRARY_OUTPUT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/lib)
IF (COMPEARTH_MAKE_FINTER)
   SET(CMAKE_Fortran_MODULE_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include)
ENDIF()
# For Python
IF (COMPEARTH_BUILD_PYTHON_MODULE)
   SET(CMAKE_SWIG_OUTDIR ${CMAKE_SOURCE_DIR}/python)
ENDIF()


IF (COMPEARTH_USE_MKL)
   MESSAGE("Using MKL")
   FIND_PACKAGE(MKL REQUIRED)
ELSE ()
   MESSAGE("Using BLAS/LAPACK")
   FIND_PACKAGE(CBLAS REQUIRED)
   FIND_PACKAGE(LAPACKE REQUIRED)
ENDIF(COMPEARTH_USE_MKL)

IF (CMAKE_BUILD_TYPE STREQUAL "DEBUG")
    message("debug mode")
    SET(COMPEARTH_DEBUG_SRC 1)
ELSE ()
    SET(COMPEARTH_DEBUG_SRC 0)
ENDIF ()

ADD_SUBDIRECTORY(include)

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/include)

IF (COMPEARTH_USE_MKL)
   INCLUDE_DIRECTORIES(${MKL_INCLUDE_DIR})
ELSE()
   INCLUDE_DIRECTORIES(${LAPACKE_INCLUDE_DIR})
   INCLUDE_DIRECTORIES(${CBLAS_INCLUDE_DIR})
ENDIF (COMPEARTH_USE_MKL)

SET (SRCS angleMT.c auxiliaryPlane.c beta2u.c cart2sph.c
          CMTdecom.c CMTdecomIso.c CMT2faultpar.c
          CMT2m0.c CMT2mw.c CMT2omega.c CMT2TT.c
          convertMT.c fangle.c eulerUtil_fangleSigned.c eulerUtil_rotmat.c
          eulerUtil_rotmatGen.c gamma2v.c h2theta.c lam2lune.c
          lam2nualpha.c lam2phizeta.c lamsort.c lune2lam.c lune2rect.c
          m02hdur.c m02mw.c mw2m0.c Mvec2Mmat.c
          normal2strdip.c normMat.c normMT.c nualpha2lam.c
          privateFunctions.c rect2lune.c standardDecomposition.c
          tape2015Eqn7.c theta2h.c transform_mat.c 
          TT2CMT.c u2beta.c U2pa.c Udetcheck.c Uorth.c
          v2gamma.c xyz2latlon.c xyz2tp.c
)
IF (COMPEARTH_MAKE_FINTER)
   SET (SRCS ${SRCS} compearth.F90)
ENDIF()

ADD_LIBRARY(compearth_shared SHARED ${SRCS})
ADD_LIBRARY(compearth_static STATIC ${SRCS})
ADD_EXECUTABLE(app2015 unit_tests/app2015.c)
ADD_EXECUTABLE(miscCheck unit_tests/checks.c) 
ADD_EXECUTABLE(xdecomp unit_tests/decompose.c unit_tests/cmopad.c)

SET_TARGET_PROPERTIES(compearth_shared PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${LIBRARY_OUTPUT_PATH})
SET_TARGET_PROPERTIES(compearth_static PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${LIBRARY_OUTPUT_PATH})
SET_TARGET_PROPERTIES(app2015 PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_TESTING_OUTPUT_DIRECTORY}) 
SET_TARGET_PROPERTIES(miscCheck PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_TESTING_OUTPUT_DIRECTORY})
SET_TARGET_PROPERTIES(xdecomp PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_TESTING_OUTPUT_DIRECTORY})

IF (COMPEARTH_USE_MKL)
   SET (LINK_LIB_ALL ${LINK_LIB_ALL} ${MKL_LIBRARY} -lm -ldl)
ELSE ()
   SET (LINK_LIB_ALL ${LINK_LIB_ALL} ${LAPACKE_LIBRARY} ${LAPACK_LIBRARY} ${CBLAS_LIBRARY} ${BLAS_LIBRARY} -lm -ldl -lgfortran)
ENDIF ()
TARGET_LINK_LIBRARIES(compearth_shared ${LINK_LIB_ALL})
SET (LINK_LIB_ALL compearth_shared ${LINK_LIB_ALL})

TARGET_LINK_LIBRARIES(app2015 ${LINK_LIB_ALL})
TARGET_LINK_LIBRARIES(miscCheck ${LINK_LIB_ALL})
TARGET_LINK_LIBRARIES(xdecomp ${LINK_LIB_ALL})

#ADD_TEST(ap2015Test ${CMAKE_TESTING_OUTPUT_DIRECTORY}/app2015)
ADD_TEST(NAME miscCheckTest
         WORKING_DIRECTORY ${CMAKE_TESTING_OUTPUT_DIRECTORY}
         COMMAND miscCheck)
ADD_TEST(NAME app2015Test
         WORKING_DIRECTORY ${CMAKE_TESTING_OUTPUT_DIRECTORY}
         COMMAND app2015)
ADD_TEST(NAME decompositionTest
         WORKING_DIRECTORY ${CMAKE_TESTING_OUTPUT_DIRECTORY}
         COMMAND xdecomp)

SET(TARGET_NAMES ${compearth_shared} ${compearth_static})
INSTALL(TARGETS ${TARGET_NAMES}
        RUNTIME DESTINATION ${CMAKE_TESTING_OUTPUT_DIRECTORY}
        LIBRARY DESTINATION ${LIBRARY_OUTPUT_PATH}
        ARCHIVE DESTINATION ${LIBRARY_OUTPUT_PATH})
IF (COMPEARTH_BUILD_PYTHON_MODULE)
   IF (CMAKE_VERSION VERSION_EQUAL 3.5.1)
      FIND_PACKAGE(SWIGOTHER REQUIRED)
   ELSE (CMAKE_VERSION VERSION_EQUAL 3.5.1)
      FIND_PACKAGE(SWIG REQUIRED)
   ENDIF (CMAKE_VERSION VERSION_EQUAL 3.5.1)
   INCLUDE(${SWIG_USE_FILE})

   FIND_PACKAGE(PythonLibs)
   FIND_PACKAGE(NumPy)
   INCLUDE_DIRECTORIES(${PYTHON_INCLUDE_DIRS} ${PYTHON_NUMPY_INCLUDE_DIR})

   IF (CMAKE_VERSION VERSION_LESS 3.0)
      SWIG_ADD_MODULE(compearth python ${CMAKE_SOURCE_DIR}/swig/swig-controller.i)
   ELSE (CMAKE_VERSION VERSION_LESS 3.0)
      SWIG_ADD_LIBRARY(compearth LANGUAGE python SOURCES ${CMAKE_SOURCE_DIR}/swig/swig-controller.i)
   ENDIF (CMAKE_VERSION VERSION_LESS 3.0)
   SWIG_LINK_LIBRARIES(compearth compearth_shared ${PYTHON_LIBRARIES})
   SET_TARGET_PROPERTIES(${SWIG_MODULE_compearth_REAL_NAME} PROPERTIES
                         LIBRARY_OUTPUT_DIRECTORY ${CMAKE_SWIG_OUTDIR})
   #INSTALL(TARGETS ${SWIG_MODULE_compearth_REAL_NAME} LIBRARY DESTINATION ${CMAKE_SWIG_OUTDIR}))
ENDIF (COMPEARTH_BUILD_PYTHON_MODULE)

#------------------------------------------------------------------------------#
#                              Configuration Details                           #
#------------------------------------------------------------------------------#
SET(COMPEARTH_LIBRARY compearth)
SET(INCLUDE_INSTALL_DIR include/) #${INCLUDE_DIRECTORIES}) #$include/ ... CACHE)
SET(LIB_INSTALL_DIR lib/)
SET(SYSCONFIG_INSTALL_DIR etc/compearth/)
#SET(LIB_INSTALL_DIR ${LIBRARY_OUTPUT_PATH})
INCLUDE(CMakePackageConfigHelpers)
CONFIGURE_PACKAGE_CONFIG_FILE(${CMAKE_MODULE_PATH}/FindCompearth.cmake.in
                              ${CMAKE_BINARY_DIR}/FindCompearth.cmake
                              INSTALL_DESTINATION ${LIB_INSTALL_DIR}/compearth/cmake
                              PATH_VARS INCLUDE_INSTALL_DIR SYSCONFIG_INSTALL_DIR)
WRITE_BASIC_PACKAGE_VERSION_FILE(${LIBRARY_OUTPUT_PATH}/CompearthConfigVersion.cmake
                                 VERSION ${COMPEARTH_VERSION} 
                                 COMPATIBILITY SameMajorVersion) #ExactVersion)
SET(TARGET_NAMES compearth_shared compearth_static)
INSTALL(TARGETS ${TARGET_NAMES}
        PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ GROUP_EXECUTE GROUP_WRITE GROUP_READ WORLD_EXECUTE WORLD_WRITE WORLD_READ
        LIBRARY DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
        ARCHIVE DESTINATION ${CMAKE_INSTALL_PREFIX}/lib)
INSTALL(FILES
        ${CMAKE_BINARY_DIR}/FindCompearth.cmake
        ${LIBRARY_OUTPUT_PATH}/CompearthConfigVersion.cmake
        DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/compearth/cmake)
